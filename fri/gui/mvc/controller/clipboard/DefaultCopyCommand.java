package fri.gui.mvc.controller.clipboard;

import javax.swing.undo.*;
import fri.gui.mvc.controller.AbstractEditCommand;
import fri.gui.mvc.model.ModelItem;
import fri.gui.mvc.controller.CommandArguments;

/**
	Basic command pattern for a copy action, generated by DefaultClipboard or subclasses.
	Deletes the created item when undo is triggered, re-creates the item
	from source when redo is triggered (calling doit() to do that).

	@author  Ritzberger Fritz
*/

public class DefaultCopyCommand extends AbstractEditCommand
{
	/**
		Create a CopyCommand, do not execute it. It will be undoable after calling doit().
		
		@param source item that is to be copied, non-null
		@param target container item where the new copy should live, can be null
		@param pasteInfo info about where to paste, and the source model.
	*/
	public DefaultCopyCommand(ModelItem source, ModelItem target, CommandArguments pasteInfo)	{
		this(null, null, source, target, pasteInfo);
	}

	/**
		Additionally store the source and target editor.
	*/
	public DefaultCopyCommand(Object sourceEditor, Object targetEditor, ModelItem source, ModelItem target, CommandArguments pasteInfo)	{
		super(sourceEditor, targetEditor, source, target, pasteInfo);
	}


	/**
		Execute the CopyCommand: calls <i>source.doCopy(target, pasteInfo)</i>.
		Stores the return in membervariable "newItem". Now the edit will be undoable.
	*/
	public Object doit()	{
		return newItem = source.doCopy(target, commandArguments);
	}

	/** Remove the stored return from doit() "newItem", when not null: calls <i>newItem.doDelete(pasteInfo)</i>. */
	public void undo() throws CannotUndoException	{
		super.undo();

		if (newItem != null)
			newItem.doDelete(commandArguments);
	}

	// redo() is implemented in DefaultEditCommand. just calls doit().

}